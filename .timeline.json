{
  "timeline_index": 140,
  "planner": {
    "Team Leader": {
      "1": {
        "task_id": "1",
        "dependent_task_ids": [],
        "instruction": "Implement B0-FE-01 - Vue.js routes with role-based guards. Create a complete Vue.js application with the following requirements:\n\n**Technical Stack:** Vue 3, TypeScript, Vue Router, Pinia, Tailwind CSS\n\n**Tasks to implement:**\n\n1. **Initialize base routes** - Create `src/router/index.ts` with routes: `/pos`, `/history`, `/settings`, `/login`, `/denied`. Use HTML5 history mode. Set redirects: `/` → `/pos` and `/*` → `/pos`.\n\n2. **Create auth store (Pinia)** - Create `src/stores/auth.ts` with state: `tokenAccess: string|null`, `roles: string[]`, `profileLoaded: boolean`. Actions: `setToken(token)`, `loadProfile()` (GET `/auth/me`), `logout()`.\n\n3. **Create minimal views** - Create placeholder views: `src/views/PosView.vue`, `HistoryView.vue`, `SettingsView.vue`, `LoginView.vue`, `DeniedView.vue` with simple templates showing titles.\n\n4. **Add route metadata** - In `router/index.ts`, add `meta.requiresAuth` and `meta.roles`:\n   - `/pos`, `/history`: `['vendedor_caja','admin']`\n   - `/settings`: `['admin']`\n   - `/login`, `/denied`: no auth required\n\n5. **Implement global guard (beforeEach)** - Add router guard:\n   - If `!requiresAuth` → allow\n   - If no `tokenAccess` → redirect to `/login?redirect=<to>`\n   - If `!profileLoaded` → `await auth.loadProfile()` (try/catch → logout and `/login`)\n   - Check `allowedRoles` vs `auth.roles` → if not allowed, go to `/denied`\n\n6. **Add loader/loading state** - Add NProgress or simple overlay: start in `beforeEach`, finish in `afterEach`. Block render until `profileLoaded`.\n\n7. **Post-login redirection** - In `LoginView.vue`, after `setToken(access)`: read `route.query.redirect || '/pos'` and `router.push` there.\n\n8. **Access denied page** - In `DeniedView.vue`, show 403 message + \"Back\" button (`router.back()` or `router.push('/pos')`).\n\n9. **POS layout** - Create `src/layouts/POSLayout.vue` with simple header and `<router-view/>`. Use it in protected routes.\n\n10. **Basic tests** - Add unit tests for guard logic and basic E2E test for login flow.\n\n11. **Update README** - Document routes, `meta.roles`, how guard works, how to simulate roles.\n\n**Acceptance Criteria:**\n- Without token, protected route → `/login` with `?redirect`\n- `vendedor_caja` accesses `/pos` and `/history`, NOT `/settings`\n- `admin` accesses all routes\n- Loading state visible while resolving `/auth/me`\n- Clear denied page with exit option\n- No flickering during route transitions\n\n**File Structure:**\n```\nsrc/\n  router/index.ts\n  stores/auth.ts\n  views/\n    PosView.vue\n    HistoryView.vue\n    SettingsView.vue\n    LoginView.vue\n    DeniedView.vue\n  layouts/\n    POSLayout.vue\n```\n\nUse Vue 3 Composition API, TypeScript, and ensure proper error handling for authentication flows.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": true,
        "assignee": "Alex",
        "start_at": 1758506236.151208,
        "end_at": 1758506682.7046332
      },
      "current_task_id": "B2-FE-T2",
      "2": {
        "task_id": "2",
        "dependent_task_ids": [],
        "instruction": "Implement B0-FE-02 - Menu and Banners system with role-based navigation and operational state management.\n\n**Tasks to implement:**\n\n1. **Menu model and role mapping** - Create `src/config/menu.ts` exporting MENU_ITEMS with `{id, label, icon, route, roles: string[]}`. Items:\n   - venta (/pos) → roles ['vendedor_caja','admin']\n   - historial (/history) → roles ['vendedor_caja','admin'] \n   - config (/settings) → roles ['admin']\n\n2. **Operations/state store** - Create `src/stores/ops.ts` (Pinia) with state: `hasShiftOpen: boolean`, `hasCashboxOpen: boolean`, `offline: boolean`. Actions: `setShift(open: boolean)`, `setCashbox(open: boolean)`, `setOffline(flag: boolean)`. Listen to window events 'online'/'offline' and update offline state.\n\n3. **Sidebar component with role filtering** - Create `src/components/Sidebar.vue` that:\n   - Imports MENU_ITEMS\n   - Reads roles from useAuth() (Pinia)\n   - Filters MENU_ITEMS by `item.roles.some(r => roles.includes(r))`\n   - Renders list with `<RouterLink>` and Tailwind classes ('active' based on route)\n\n4. **Simple Topbar** - Create `src/components/Topbar.vue` with view title (prop) and status indicator: if offline → badge 'Offline'; else 'Online'.\n\n5. **Global Banners** - Create `src/components/GlobalBanners.vue` that reads useOps() and shows in severity order:\n   - If offline → red banner: 'Sin conexión: modo lectura'\n   - Else if !hasShiftOpen → amber banner: 'No hay turno abierto'\n   - Else if !hasCashboxOpen → amber banner: 'Caja cerrada'\n\n6. **Integrate components in layout** - Update `src/layouts/POSLayout.vue` to include `<Sidebar/>`, `<Topbar/>` and `<GlobalBanners/>` before `<router-view/>`. Use CSS grid/flex with Tailwind.\n\n7. **Critical action blocking** - Create composable `src/composables/useBlockers.ts` that exposes:\n   - `canCheckout = computed(() => !ops.offline && ops.hasShiftOpen && ops.hasCashboxOpen)`\n   - Helpers for tooltips/messages\n   - Use in PosView.vue to disable \"Cobrar\" button and show reason\n\n8. **Visual styling** - Apply Tailwind:\n   - Sidebar: fixed width, items with hover:bg-muted and aria-current\n   - Banners: red for offline (bg-red-100 text-red-800), amber for shift/cashbox (bg-amber-100 text-amber-800)\n   - Disabled button: opacity-50 cursor-not-allowed\n\n9. **Unit tests** - Add tests:\n   - Sidebar: with roles=['vendedor_caja'] renders 2 items; with ['admin'] renders 3\n   - Blockers: canCheckout is false if offline=true or !hasShiftOpen or !hasCashboxOpen\n\n10. **Online/offline listeners** - In main.ts, when mounting app: `ops.setOffline(!navigator.onLine)`. Add global window listeners to update offline state.\n\n11. **README section** - Update README.md: how to set hasShiftOpen and hasCashboxOpen from future cashbox screens; how to test offline (disconnect network).\n\n**Acceptance Criteria:**\n- Menu shows/hides based on role (vendedor vs admin)\n- Banners appear correctly in severity order: Offline / No shift / Cashbox closed\n- \"Cobrar\" button disables when any critical flag prevents it, with clear message\n- Simple and readable Tailwind styles\n- Offline detection works automatically\n\n**File Structure:**\n```\nsrc/\n  config/menu.ts\n  stores/ops.ts\n  components/\n    Sidebar.vue\n    Topbar.vue\n    GlobalBanners.vue\n  composables/\n    useBlockers.ts\n  layouts/POSLayout.vue (updated)\n  views/PosView.vue (updated)\n```\n\nUse Vue 3 Composition API, TypeScript, and ensure proper integration with existing auth system.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": true,
        "assignee": "Alex",
        "start_at": 1758506682.7046413,
        "end_at": 1758507014.124455
      },
      "3": {
        "task_id": "3",
        "dependent_task_ids": [],
        "instruction": "Implement B0-FE-03 - HTTP Interceptor and Error Handling system with automatic token refresh and user-friendly error management.\n\n**Tasks to implement:**\n\n1. **Create axiosClient** - Create `src/lib/axiosClient.ts` export default axios instance with `baseURL` (from `.env`), `timeout=15000`.\n\n2. **Token utility and store** - In `src/stores/auth.ts`, expose `getAccess()` and `getRefresh()` (if stored), and `setToken(access)`, `setRefresh(refresh?)`, `logout()`.\n\n3. **Request interceptor (Authorization)** - In `axiosClient.ts`, add `axios.interceptors.request.use` that if `auth.getAccess()` exists, add header `Authorization: Bearer <token>`.\n\n4. **Refresh queue (avoid race conditions)** - In `src/lib/authRefresh.ts`, implement:\n   - `let isRefreshing=false; let pendingRequests: ((token:string)=>void)[]=[]`\n   - `enqueue(cb)` and `resolveAll(newToken)`\n   - Export helpers for interceptor use\n\n5. **Response interceptor (401 → refresh)** - In `axiosClient.ts` `interceptors.response.use`:\n   - If response is 401 and error indicates `token_expired`:\n     - If `!isRefreshing`: set `isRefreshing=true`; `POST /auth/refresh` with `refresh` from store\n     - On success: `auth.setToken(newAccess)`; `resolveAll(newAccess)`; retry original request\n     - On failure: `auth.logout()` and reject\n   - If refresh already in progress: `enqueue(token=> retry original req with new token)`\n\n6. **Error normalizer + toasts** - Create `src/lib/errorToast.ts`:\n   - `mapErrorToMessage(err)` → short string (e.g., 401 invalid credentials, 403 access denied, 409 conflict, 5xx server error, network: 'No connection')\n   - `showToast(message)` (use existing toast library)\n   - Integrate in `axiosClient` for 4xx/5xx (except refresh flow)\n\n7. **Security safeguards (anti-loops)** - Protect interceptor to **not refresh** if endpoint is already `/auth/refresh` or if original request was already retried (use flag `config.__isRetry=true`). Limit to **1** retry.\n\n8. **Integration with guard (final UX)** - In `router/index.ts` or plugin, if `auth.logout()` is triggered from interceptor, redirect to `/login` and show toast 'Session expired'.\n\n9. **Unit tests for interceptor** - Add tests (Vitest/Jest) for `axiosClient`:\n   - **401 token_expired** → makes `POST /auth/refresh`, saves `access` and **retries** `/auth/me` (200)\n   - **401 token_expired** with **2+ concurrent requests** → single refresh, both responses 200\n   - **Invalid refresh** → `logout()` called and **toast** 'Session expired'\n   - **403** → shows toast 'Access denied'\n   - **409** → shows toast 'Conflict/Could not complete action'\n   - **Network Error** → toast 'No connection'\n\n10. **README \"Interceptor & Errors\"** - Update `README.md` with: refresh flow, how to test expiration (mock 401), toast policy, and how to avoid leaks (don't log tokens).\n\n**Acceptance Criteria:**\n- Requests attach `Authorization` if token exists\n- On **401 due to expiration**, makes **refresh** once and **retries** original request\n- If **refresh fails**, does **logout** and redirects to **/login** with toast \"Session expired\"\n- 4xx/5xx and network errors show **clear toasts**\n- No **refresh loops** or multiple parallel refreshes exist\n\n**File Structure:**\n```\nsrc/\n  lib/\n    axiosClient.ts\n    authRefresh.ts\n    errorToast.ts\n  stores/auth.ts (updated)\n  router/index.ts (updated)\n```\n\n**Environment Variables:**\n- Add `VITE_API_BASE_URL` to `.env` file\n\n**Testing scenarios:**\n1. Login, force `access` expired → navigate to `/pos` → stays in view (refresh ok)\n2. Open 2 tabs and trigger fetch simultaneously with expired token → only 1 refresh\n3. Invalidate `refresh` too → when navigating, go to `/login` + toast\n4. Simulate 403 and 409 from BE → appropriate toasts\n\nUse Vue 3 Composition API, TypeScript, and ensure seamless integration with existing auth and routing systems.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": true,
        "assignee": "Alex",
        "start_at": 1758507014.1244605,
        "end_at": 1758510691.8658187
      },
      "4": {
        "task_id": "4",
        "dependent_task_ids": [],
        "instruction": "Implement FE-T1 - SearchBar component for product search and barcode scanning.\n\n**Objective:** Create a search bar component with autocomplete suggestions and barcode scanner support for the POS system.\n\n**Technical Requirements:**\n\n1. **Create SearchBar component** - `src/components/SearchBar.vue` with:\n   - Input field for product search\n   - Dropdown with search suggestions\n   - Debounced search (250ms delay)\n   - API call to `GET /catalog/search?q=<query>`\n   - Enter key or barcode scan triggers `addItem` event\n\n2. **Features to implement:**\n   - **Debounced search**: Wait 250ms after user stops typing before making API call\n   - **Suggestions dropdown**: Show matching products from API response\n   - **Keyboard navigation**: Arrow keys to navigate suggestions, Enter to select\n   - **Barcode scanner support**: Detect barcode input patterns and auto-add items\n   - **Event emission**: Emit `addItem(product, unit='unit')` to parent component\n\n3. **API Integration:**\n   - Use existing `axiosClient` for HTTP requests\n   - Call `GET /catalog/search?q=<searchTerm>` with debouncing\n   - Handle loading states and errors gracefully\n   - Mock API response for development/testing\n\n4. **User Experience:**\n   - Clear visual feedback for loading state\n   - Highlight matching text in suggestions\n   - Auto-clear input after adding item\n   - Responsive design with Tailwind CSS\n   - Accessible keyboard navigation\n\n5. **Event Interface:**\n   ```typescript\n   // Emit to parent component\n   emit('addItem', {\n     product: ProductObject,\n     unit: 'unit' // default unit\n   })\n   ```\n\n**Acceptance Criteria:**\n- ✅ Typing \"gas\" shows product suggestions after 250ms\n- ✅ Enter key adds selected item with 1 unit to cart\n- ✅ Barcode scanner input automatically adds items\n- ✅ Dropdown shows/hides appropriately\n- ✅ Loading state visible during API calls\n- ✅ Component integrates cleanly with existing POS layout\n\n**File Structure:**\n```\nsrc/\n  components/\n    SearchBar.vue\n```\n\n**Integration:**\n- Use in `PosView.vue` to add products to cart\n- Leverage existing HTTP interceptors and error handling\n- Follow established component patterns from B0-FE-01/02/03\n\nUse Vue 3 Composition API, TypeScript, and Tailwind CSS for consistency with the existing codebase.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": true,
        "assignee": "Alex",
        "start_at": 1758510691.865825,
        "end_at": 1758511965.5108037
      },
      "5": {
        "task_id": "5",
        "dependent_task_ids": [],
        "instruction": "Implement B1 - Sales System (SearchBar + Cart + Pricing) following expert UX/UI guidelines for high-speed POS operations.\n\n**EXPERT UX/UI REQUIREMENTS:**\n\n**1. LAYOUT PRINCIPLES:**\n- **2-zone layout**: Left = Input (customer + search); Right = Execution (cart + totals + checkout)\n- **Z-reading pattern**: Title/status top → results middle → primary action (Checkout) bottom-right\n- **Performance budget**: <100ms local feedback; <400ms for quotes; spinner if >300ms\n- **Keyboard + scanner first**, touch second (44×44px targets)\n- **Clear states**: empty, loading, error, ready - nothing ambiguous\n\n**2. RESPONSIVE GRID:**\n- Desktop: `grid-cols-[1fr,0.9fr] gap-4`\n- Mobile: stack (input top, cart below, totals sticky bottom)\n- **Sticky bars**: Header (customer + search), Footer (totals + checkout button)\n\n**3. COMPONENTS TO IMPLEMENT:**\n\n**SearchBar.vue (Expert UX):**\n- Autofocus on mount\n- Debounce 250ms to `/catalog/search?q=`\n- Enter adds 1 unit of first result if list is open\n- Shortcuts: F2 focus search, ESC closes suggestions\n- Placeholder: \"Escribí código o nombre… (Ej: GAS500)\"\n- Error state: \"Sin conexión. Los precios pueden no ser exactos.\"\n\n**Cart.vue:**\n- Row layout: name (16px), SKU (12px muted), qty +/- buttons (large), unit price (small), **subtotal** (large, right-aligned)\n- Keyboard shortcuts: `+/-` keys, `DEL` removes item, `Ctrl+D` discount per item\n- Rules: minimum qty 1; if unit changes to PACK, show tooltip \"1 pack = N units\"\n- Compact density (max 6-8 visible, scroll)\n\n**useQuote.ts (Composable):**\n- Debounce 350ms; abort previous requests; cache last success 5s\n- Return: `{subtotal, discounts_total, total, combo_discounts}`\n- AbortController for canceling previous quotes\n- Fallback: keep last valid quote if server fails\n\n**TotalsPanel.vue:**\n- Order: Subtotal → Discounts (lines and combos listed) → **TOTAL**\n- Total font: 24-28px, bold, high contrast\n- Discrete animation on total change (fade/scale 100ms)\n- Toast on combo applied: \"Aplicado: Combo GAL+GAS (-$300)\"\n- Skeleton while loading; maintain last value on error\n\n**CustomerPicker.vue:**\n- Always visible top-left\n- Show segment badge (Mayorista/Minorista)\n- Changing customer triggers immediate re-quote\n\n**4. STATES & MICROCOPY (exact text):**\n- Empty cart: \"Agregá productos con el lector o buscador.\"\n- Loading quote: \"Calculando precios…\"\n- Quote error: \"No pudimos calcular los totales. Probá de nuevo.\"\n- No connection: \"Sin conexión: mostrás precios guardados. Confirmá antes de cobrar.\"\n\n**5. ACCESSIBILITY (a11y):**\n- Focus rings: `focus:outline-none focus:ring-2`\n- ARIA roles: results `role=\"listbox\"`, items `role=\"option\"`\n- Total announcements: `aria-live=\"polite\"`\n- Help shortcuts listed in \"Ayuda (F1)\"\n\n**6. ERROR HANDLING:**\n- Invalid qty: red border + inline \"Mínimo 1\"\n- Out of stock (409 error): red badge \"Falta\"\n- Limit toast spam: max 1 every 2s per type\n\n**7. PERFORMANCE & ROBUSTNESS:**\n- Cache last price-quote for 5s (same payload) to avoid flicker\n- AbortController: cancel previous quotes if user keeps typing\n- Fallback: show last valid quote if current fails\n\n**8. USAGE METRICS (events to log):**\n- `search_performed` {q, results_count, ms}\n- `item_added` {product_id, unit}\n- `qty_changed` {direction, before, after}\n- `quote_ms` {ms, items_count}\n- `combo_applied` {combo_id, amount}\n- `error_quote` {code}\n- **KPI target**: first item → total ready <3s\n\n**9. UI TOKENS:**\n- Typography: Inter, 14/16/20/28px; weights 400/600/700\n- Colors: primary (buttons/tickets), emphasis (dark on light), alerts (red/amber/green)\n- Elevation: totals panel with soft shadow; results with hover\n\n**10. ACCEPTANCE CHECKLIST:**\n- [ ] Search and add with Enter (no mouse needed)\n- [ ] Qty +/- responds without perceptible lag\n- [ ] Total reacts <400ms from change\n- [ ] Combos visible (discount line) with correct microcopy\n- [ ] Customer segment affects prices (badge + total)\n- [ ] Errors and no connection don't block sale (clear info)\n\n**TECHNICAL IMPLEMENTATION:**\n- Update existing `SearchBar.vue` with expert UX requirements\n- Create `Cart.vue`, `TotalsPanel.vue`, `CustomerPicker.vue`\n- Create `useQuote.ts` composable with debouncing and caching\n- Integrate all components in `PosView.vue` with 2-zone layout\n- Add keyboard shortcuts and accessibility features\n- Implement proper error states and loading indicators\n\n**API ENDPOINTS:**\n- `GET /catalog/search?q=<query>` - product search\n- `POST /sales/quote` - price calculation with combos\n- Customer data integration\n\nUse Vue 3 Composition API, TypeScript, and Tailwind CSS. Follow the expert UX guidelines exactly for professional POS experience.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": true,
        "assignee": "Alex",
        "start_at": 1758511965.5108078,
        "end_at": 1758513730.1254668
      },
      "B2-FE-T1": {
        "task_id": "B2-FE-T1",
        "dependent_task_ids": [],
        "instruction": "Crear PaymentsStore (estado y validaciones) - Crear `src/stores/payments.ts` (Pinia) con: `payments:[{method:'cash'|'card'|'transfer'|'cc', amount:number}]`, acciones `addPayment(method,amount)`, `remove(i)`, `setAmount(i, n)`, getter `totalPaid`, y función `validateAgainst(total)` que devuelve `{ok:boolean, change:number, error?:string}` (ok si `totalPaid >= total`). DoD: cálculos exactos; `change = totalPaid - total`.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": true,
        "assignee": "Alex",
        "start_at": 1758513730.1254704,
        "end_at": 1758514158.9959311
      },
      "B2-FE-T2": {
        "task_id": "B2-FE-T2",
        "dependent_task_ids": [
          "B2-FE-T1"
        ],
        "instruction": "Crear PaymentsPanel (UI + UX) - Crear `src/components/PaymentsPanel.vue` con select de método y campo monto; botón 'Agregar'. Lista de pagos con borrar/editar; muestra `totalPagado` y `vuelto`. Reglas: montos ≥ 0; si método `cc` solo si el cliente lo permite (prop `allowCC`). Emite evento `validityChanged({ok, change})`. DoD: split payment funcionando, vuelto correcto.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex",
        "start_at": 1758514158.9960241
      },
      "B2-FE-T3": {
        "task_id": "B2-FE-T3",
        "dependent_task_ids": [],
        "instruction": "Crear useCheckout (cliente de API con idempotencia) - Crear `src/composables/useCheckout.ts` con función `checkout({customerId, items, payments, idempotencyKey})`. Usa `axiosClient.post('/pos/checkout', body, { headers:{'Idempotency-Key': key}})`. Maneja 201 y 409; retorna `{ok, data?, missing?, error?}`. DoD: agrega header y mapea 201/409.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      },
      "B2-FE-T4": {
        "task_id": "B2-FE-T4",
        "dependent_task_ids": [],
        "instruction": "IdempotencyKey (generación y ciclo) - En `src/stores/sale.ts`, agregar `idempotencyKey:string` (uuid v4). Acción `resetKey()` al iniciar una venta y después de un checkout exitoso. PosView usa esta key en `useCheckout`. DoD: cada venta sale con key única.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      },
      "B2-FE-T5": {
        "task_id": "B2-FE-T5",
        "dependent_task_ids": [
          "B2-FE-T1",
          "B2-FE-T2",
          "B2-FE-T3",
          "B2-FE-T4"
        ],
        "instruction": "Integración Checkout en PosView - Actualizar `src/views/PosView.vue`: Obtener `total` desde `TotalsPanel` y `payments` desde `PaymentsStore`. Botón **Cobrar** habilitado si: no offline, turno/caja abiertos (useBlockers), `payments.validateAgainst(total).ok`, carrito no vacío. Al click: llamar `useCheckout` con `{customerId, items: cart.asQuoteItems(), payments, idempotencyKey}`. DoD: cobra cuando todo es válido.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      },
      "B2-FE-T6": {
        "task_id": "B2-FE-T6",
        "dependent_task_ids": [
          "B2-FE-T5"
        ],
        "instruction": "Éxito 201 (post-checkout) - Tras 201: Mostrar modal 'Venta realizada' con `receipt.number`, `total`, `change`, CTA 'Imprimir' (`window.open(receipt.print_url)`) y 'Nueva venta'. Limpiar `cart`, `payments`, `sale.customerId?` (opcional), y `resetKey()`. DoD: limpia estado y ofrece imprimir.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      },
      "B2-FE-T7": {
        "task_id": "B2-FE-T7",
        "dependent_task_ids": [
          "B2-FE-T5"
        ],
        "instruction": "Manejo de 409 (faltante de stock) - Si 409: Resaltar en `Cart` las líneas con `product_id` en `missing[]` (borde rojo + tooltip 'Disponibles: X'). Botón 'Ajustar automáticamente' que ponga `qty = available` para esas líneas. Recalcular `price-quote` y reintentar checkout. DoD: UX rápida para corregir faltantes.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      },
      "B2-FE-T8": {
        "task_id": "B2-FE-T8",
        "dependent_task_ids": [
          "B2-FE-T5"
        ],
        "instruction": "Errores de red y reintentos cortos - Si error de red/5xx: mostrar toast 'No se pudo cobrar. Revisá conexión e intentá de nuevo'. Hacer un reintento automático único a los 800 ms si la app vuelve `online` (usar `ops.offline` watcher). DoD: resiliencia básica sin loop infinito.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      },
      "B2-FE-T9": {
        "task_id": "B2-FE-T9",
        "dependent_task_ids": [
          "B2-FE-T2"
        ],
        "instruction": "Bloqueos finales (reglas) - Conectar `useBlockers` (offline/turno/caja) con `PaymentsPanel` y botón **Cobrar** (disabled + tooltip con motivo). DoD: no se puede cobrar si hay bloqueo.",
        "task_type": "general",
        "code": "",
        "result": "",
        "is_success": false,
        "is_finished": false,
        "assignee": "Alex"
      }
    }
  },
  "gallery_last_file": {},
  "timeline_status": {
    "1": 1,
    "2": 1,
    "3": 1,
    "4": 1,
    "5": 1,
    "6": 1,
    "7": 1,
    "8": 1,
    "9": 1,
    "10": 1,
    "11": 1,
    "12": 1,
    "13": 1,
    "14": 1,
    "15": 1,
    "16": 1,
    "17": 1,
    "18": 1,
    "19": 1,
    "20": 1,
    "21": 1,
    "22": 1,
    "23": 1,
    "24": 1,
    "25": 1,
    "26": 1,
    "27": 1,
    "28": 1,
    "29": 1,
    "30": 1,
    "31": 1,
    "32": 1,
    "33": 1,
    "34": 1,
    "35": 1,
    "36": 1,
    "37": 1,
    "38": 1,
    "39": 0,
    "40": 1,
    "41": 1,
    "42": 1,
    "43": 1,
    "44": 1,
    "45": 1,
    "46": 1,
    "47": 1,
    "48": 1,
    "49": 1,
    "50": 1,
    "51": 1,
    "52": 1,
    "53": 1,
    "54": 1,
    "55": 1,
    "56": 1,
    "57": 1,
    "58": 1,
    "59": 1,
    "60": 1,
    "61": 1,
    "62": 1,
    "63": 1,
    "64": 1,
    "65": 1,
    "66": 1,
    "67": 1,
    "68": 1,
    "69": 1,
    "70": 1,
    "71": 1,
    "72": 1,
    "73": 1,
    "74": 1,
    "75": 1,
    "76": 1,
    "77": 1,
    "78": 1,
    "79": 1,
    "80": 1,
    "81": 1,
    "82": 1,
    "83": 1,
    "84": 1,
    "85": 1,
    "86": 1,
    "87": 1,
    "88": 1,
    "89": 1,
    "90": 1,
    "91": 1,
    "92": 1,
    "93": 1,
    "94": 1,
    "95": 1,
    "96": 1,
    "97": 1,
    "98": 1,
    "99": 1,
    "100": 1,
    "101": 1,
    "102": 1,
    "103": 1,
    "104": 1,
    "105": 1,
    "106": 1,
    "107": 1,
    "108": 1,
    "109": 1,
    "110": 1,
    "111": 1,
    "112": 1,
    "113": 1,
    "114": 0,
    "115": 1,
    "116": 1,
    "117": 1,
    "118": 1,
    "119": 1,
    "120": 1,
    "121": 1,
    "122": 1,
    "123": 1,
    "124": 1,
    "125": 1,
    "126": 1,
    "127": 1,
    "128": 1,
    "129": 1,
    "130": 1,
    "131": 1,
    "132": 1,
    "133": 1,
    "134": 1,
    "135": 1,
    "136": 1,
    "137": 1,
    "138": 1,
    "139": 1,
    "140": 0
  },
  "preview_servers": {},
  "preview_server": null,
  "last_build_failed": false
}