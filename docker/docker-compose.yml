version: '3.9'

services:
  # Django Backend
  web:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - ..:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - EMAIL_URL=smtp://mailhog:1025
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    expose:
      - "8000"
    networks:
      - app-network

  # Celery Worker
  worker:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    command: celery -A config worker -l info --concurrency=2
    volumes:
      - ..:/app
      - media_volume:/app/media
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - EMAIL_URL=smtp://mailhog:1025
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Celery Beat Scheduler
  beat:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ..:/app
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  # POS Frontend (Vue + Vite)
  pos-frontend:
    build:
      context: ..
      dockerfile: docker/frontend/pos.Dockerfile
    command: npm run dev -- --host 0.0.0.0 --port 5173
    volumes:
      - ../POS/workspace:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost/api
      - VITE_SENTRY_DSN=${VITE_SENTRY_DSN:-}
    ports:
      - "5173:5173"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network

  # B2B Frontend (Future Implementation)
  # b2b-frontend:
  #   build:
  #     context: ..
  #     dockerfile: docker/frontend/b2b.Dockerfile
  #   command: npm run dev -- --host 0.0.0.0 --port 5174
  #   volumes:
  #     - ../B2B:/app
  #     - /app/node_modules
  #   environment:
  #     - VITE_API_BASE_URL=http://localhost/api
  #     - VITE_SENTRY_DSN=${VITE_SENTRY_DSN:-}
  #   ports:
  #     - "5174:5174"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5174"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s
  #   networks:
  #     - app-network

  # Panel Operations Frontend (Future Implementation)
  # panel-frontend:
  #   build:
  #     context: ..
  #     dockerfile: docker/frontend/panel.Dockerfile
  #   command: npm run dev -- --host 0.0.0.0 --port 5175
  #   volumes:
  #     - ../Panel:/app
  #     - /app/node_modules
  #   environment:
  #     - VITE_API_BASE_URL=http://localhost/api
  #     - VITE_SENTRY_DSN=${VITE_SENTRY_DSN:-}
  #   ports:
  #     - "5175:5175"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5175"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s
  #   networks:
  #     - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
      pos-frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/live/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # MailHog (Development Email Testing)
  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  app-network:
    driver: bridge
