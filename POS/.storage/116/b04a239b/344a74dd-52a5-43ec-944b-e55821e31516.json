{"tasks": [{"task_id": "B2-FE-T1", "dependent_task_ids": [], "instruction": "Crear PaymentsStore (estado y validaciones) - Crear `src/stores/payments.ts` (Pinia) con: `payments:[{method:'cash'|'card'|'transfer'|'cc', amount:number}]`, acciones `addPayment(method,amount)`, `remove(i)`, `setAmount(i, n)`, getter `totalPaid`, y funci\u00f3n `validateAgainst(total)` que devuelve `{ok:boolean, change:number, error?:string}` (ok si `totalPaid >= total`). DoD: c\u00e1lculos exactos; `change = totalPaid - total`.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex", "start_at": 1758513730.1254704}, {"task_id": "B2-FE-T2", "dependent_task_ids": ["B2-FE-T1"], "instruction": "Crear PaymentsPanel (UI + UX) - Crear `src/components/PaymentsPanel.vue` con select de m\u00e9todo y campo monto; bot\u00f3n 'Agregar'. Lista de pagos con borrar/editar; muestra `totalPagado` y `vuelto`. Reglas: montos \u2265 0; si m\u00e9todo `cc` solo si el cliente lo permite (prop `allowCC`). Emite evento `validityChanged({ok, change})`. DoD: split payment funcionando, vuelto correcto.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}], "current_task_id": "B2-FE-T1"}
