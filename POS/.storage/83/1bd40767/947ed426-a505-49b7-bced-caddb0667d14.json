{"tasks": [{"task_id": "4", "dependent_task_ids": [], "instruction": "Implement FE-T1 - SearchBar component for product search and barcode scanning.\n\n**Objective:** Create a search bar component with autocomplete suggestions and barcode scanner support for the POS system.\n\n**Technical Requirements:**\n\n1. **Create SearchBar component** - `src/components/SearchBar.vue` with:\n   - Input field for product search\n   - Dropdown with search suggestions\n   - Debounced search (250ms delay)\n   - API call to `GET /catalog/search?q=<query>`\n   - Enter key or barcode scan triggers `addItem` event\n\n2. **Features to implement:**\n   - **Debounced search**: Wait 250ms after user stops typing before making API call\n   - **Suggestions dropdown**: Show matching products from API response\n   - **Keyboard navigation**: Arrow keys to navigate suggestions, Enter to select\n   - **Barcode scanner support**: Detect barcode input patterns and auto-add items\n   - **Event emission**: Emit `addItem(product, unit='unit')` to parent component\n\n3. **API Integration:**\n   - Use existing `axiosClient` for HTTP requests\n   - Call `GET /catalog/search?q=<searchTerm>` with debouncing\n   - Handle loading states and errors gracefully\n   - Mock API response for development/testing\n\n4. **User Experience:**\n   - Clear visual feedback for loading state\n   - Highlight matching text in suggestions\n   - Auto-clear input after adding item\n   - Responsive design with Tailwind CSS\n   - Accessible keyboard navigation\n\n5. **Event Interface:**\n   ```typescript\n   // Emit to parent component\n   emit('addItem', {\n     product: ProductObject,\n     unit: 'unit' // default unit\n   })\n   ```\n\n**Acceptance Criteria:**\n- \u2705 Typing \"gas\" shows product suggestions after 250ms\n- \u2705 Enter key adds selected item with 1 unit to cart\n- \u2705 Barcode scanner input automatically adds items\n- \u2705 Dropdown shows/hides appropriately\n- \u2705 Loading state visible during API calls\n- \u2705 Component integrates cleanly with existing POS layout\n\n**File Structure:**\n```\nsrc/\n  components/\n    SearchBar.vue\n```\n\n**Integration:**\n- Use in `PosView.vue` to add products to cart\n- Leverage existing HTTP interceptors and error handling\n- Follow established component patterns from B0-FE-01/02/03\n\nUse Vue 3 Composition API, TypeScript, and Tailwind CSS for consistency with the existing codebase.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex", "start_at": 1758510691.865825}], "current_task_id": "4"}
