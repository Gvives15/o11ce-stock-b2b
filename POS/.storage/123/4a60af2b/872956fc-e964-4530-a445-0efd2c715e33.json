{"tasks": [{"task_id": "B2-FE-T1", "dependent_task_ids": [], "instruction": "Crear PaymentsStore (estado y validaciones) - Crear `src/stores/payments.ts` (Pinia) con: `payments:[{method:'cash'|'card'|'transfer'|'cc', amount:number}]`, acciones `addPayment(method,amount)`, `remove(i)`, `setAmount(i, n)`, getter `totalPaid`, y funci\u00f3n `validateAgainst(total)` que devuelve `{ok:boolean, change:number, error?:string}` (ok si `totalPaid >= total`). DoD: c\u00e1lculos exactos; `change = totalPaid - total`.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex", "start_at": 1758513730.1254704}, {"task_id": "B2-FE-T2", "dependent_task_ids": ["B2-FE-T1"], "instruction": "Crear PaymentsPanel (UI + UX) - Crear `src/components/PaymentsPanel.vue` con select de m\u00e9todo y campo monto; bot\u00f3n 'Agregar'. Lista de pagos con borrar/editar; muestra `totalPagado` y `vuelto`. Reglas: montos \u2265 0; si m\u00e9todo `cc` solo si el cliente lo permite (prop `allowCC`). Emite evento `validityChanged({ok, change})`. DoD: split payment funcionando, vuelto correcto.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T3", "dependent_task_ids": [], "instruction": "Crear useCheckout (cliente de API con idempotencia) - Crear `src/composables/useCheckout.ts` con funci\u00f3n `checkout({customerId, items, payments, idempotencyKey})`. Usa `axiosClient.post('/pos/checkout', body, { headers:{'Idempotency-Key': key}})`. Maneja 201 y 409; retorna `{ok, data?, missing?, error?}`. DoD: agrega header y mapea 201/409.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T4", "dependent_task_ids": [], "instruction": "IdempotencyKey (generaci\u00f3n y ciclo) - En `src/stores/sale.ts`, agregar `idempotencyKey:string` (uuid v4). Acci\u00f3n `resetKey()` al iniciar una venta y despu\u00e9s de un checkout exitoso. PosView usa esta key en `useCheckout`. DoD: cada venta sale con key \u00fanica.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T5", "dependent_task_ids": ["B2-FE-T1", "B2-FE-T2", "B2-FE-T3", "B2-FE-T4"], "instruction": "Integraci\u00f3n Checkout en PosView - Actualizar `src/views/PosView.vue`: Obtener `total` desde `TotalsPanel` y `payments` desde `PaymentsStore`. Bot\u00f3n **Cobrar** habilitado si: no offline, turno/caja abiertos (useBlockers), `payments.validateAgainst(total).ok`, carrito no vac\u00edo. Al click: llamar `useCheckout` con `{customerId, items: cart.asQuoteItems(), payments, idempotencyKey}`. DoD: cobra cuando todo es v\u00e1lido.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T6", "dependent_task_ids": ["B2-FE-T5"], "instruction": "\u00c9xito 201 (post-checkout) - Tras 201: Mostrar modal 'Venta realizada' con `receipt.number`, `total`, `change`, CTA 'Imprimir' (`window.open(receipt.print_url)`) y 'Nueva venta'. Limpiar `cart`, `payments`, `sale.customerId?` (opcional), y `resetKey()`. DoD: limpia estado y ofrece imprimir.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T7", "dependent_task_ids": ["B2-FE-T5"], "instruction": "Manejo de 409 (faltante de stock) - Si 409: Resaltar en `Cart` las l\u00edneas con `product_id` en `missing[]` (borde rojo + tooltip 'Disponibles: X'). Bot\u00f3n 'Ajustar autom\u00e1ticamente' que ponga `qty = available` para esas l\u00edneas. Recalcular `price-quote` y reintentar checkout. DoD: UX r\u00e1pida para corregir faltantes.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T8", "dependent_task_ids": ["B2-FE-T5"], "instruction": "Errores de red y reintentos cortos - Si error de red/5xx: mostrar toast 'No se pudo cobrar. Revis\u00e1 conexi\u00f3n e intent\u00e1 de nuevo'. Hacer un reintento autom\u00e1tico \u00fanico a los 800 ms si la app vuelve `online` (usar `ops.offline` watcher). DoD: resiliencia b\u00e1sica sin loop infinito.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}, {"task_id": "B2-FE-T9", "dependent_task_ids": ["B2-FE-T2"], "instruction": "Bloqueos finales (reglas) - Conectar `useBlockers` (offline/turno/caja) con `PaymentsPanel` y bot\u00f3n **Cobrar** (disabled + tooltip con motivo). DoD: no se puede cobrar si hay bloqueo.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}], "current_task_id": "B2-FE-T1"}
