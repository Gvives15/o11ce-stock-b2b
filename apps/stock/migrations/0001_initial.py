# Generated by Django 5.1.4 on 2025-09-23 08:31

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("catalog", "0001_initial"),
        ("orders", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Warehouse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=80, unique=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="StockLot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lot_code", models.CharField(max_length=40)),
                ("expiry_date", models.DateField(db_index=True)),
                (
                    "qty_on_hand",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "is_quarantined",
                    models.BooleanField(
                        default=False,
                        help_text="Lote en cuarentena, no disponible para venta",
                    ),
                ),
                (
                    "is_reserved",
                    models.BooleanField(
                        default=False,
                        help_text="Lote reservado, no disponible para asignación automática",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="catalog.product",
                    ),
                ),
                (
                    "warehouse",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="stock.warehouse",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Movement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("entry", "Entry"), ("exit", "Exit")], max_length=8
                    ),
                ),
                ("qty", models.DecimalField(decimal_places=3, max_digits=12)),
                (
                    "unit_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("purchase", "Purchase"),
                            ("sale", "Sale"),
                            ("adjustment", "Adjustment"),
                            ("return_customer", "Return from Customer"),
                            ("return_supplier", "Return to Supplier"),
                            ("transfer", "Transfer"),
                            ("damage", "Damage"),
                            ("expiry", "Expiry"),
                        ],
                        default="adjustment",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="orders.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="catalog.product",
                    ),
                ),
                (
                    "lot",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="stock.stocklot",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["product", "created_at"],
                        name="idx_movement_product_date",
                    ),
                    models.Index(
                        fields=["type", "created_at"], name="idx_movement_type_date"
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("qty__gt", 0)),
                        name="ck_movement_qty_positive",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("type", "exit"),
                            models.Q(
                                ("type", "entry"),
                                ("lot__isnull", False),
                                ("unit_cost__isnull", False),
                                ("unit_cost__gt", 0),
                            ),
                            _connector="OR",
                        ),
                        name="ck_movement_entry_requires_lot_and_cost",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("type", "entry"),
                            models.Q(("type", "exit"), ("lot__isnull", False)),
                            _connector="OR",
                        ),
                        name="ck_movement_exit_requires_lot",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="stocklot",
            index=models.Index(fields=["product", "expiry_date"], name="idx_lot_fefo"),
        ),
        migrations.AddIndex(
            model_name="stocklot",
            index=models.Index(
                fields=[
                    "product",
                    "warehouse",
                    "is_quarantined",
                    "is_reserved",
                    "expiry_date",
                ],
                name="idx_lot_fefo_pick",
            ),
        ),
        migrations.AddConstraint(
            model_name="stocklot",
            constraint=models.UniqueConstraint(
                fields=("product", "lot_code", "warehouse"),
                name="uq_lot_per_product_warehouse",
            ),
        ),
        migrations.AddConstraint(
            model_name="stocklot",
            constraint=models.CheckConstraint(
                condition=models.Q(("qty_on_hand__gte", 0)),
                name="ck_lot_qty_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="stocklot",
            constraint=models.CheckConstraint(
                condition=models.Q(("unit_cost__gt", 0)),
                name="ck_lot_unit_cost_positive",
            ),
        ),
    ]
