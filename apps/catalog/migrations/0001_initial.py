# Generated by Django 5.1.4 on 2025-09-23 08:31

import django.contrib.postgres.indexes
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Benefit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=120)),
                (
                    "type",
                    models.CharField(
                        choices=[("discount", "Discount"), ("combo", "Combo")],
                        max_length=16,
                    ),
                ),
                (
                    "segment",
                    models.CharField(
                        choices=[("wholesale", "Wholesale"), ("retail", "Retail")],
                        max_length=16,
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("combo_spec", models.JSONField(blank=True, null=True)),
                ("active_from", models.DateField()),
                ("active_to", models.DateField()),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["segment", "is_active"],
                        name="idx_benefit_segment_active",
                    ),
                    models.Index(
                        fields=["active_from", "active_to"],
                        name="idx_benefit_date_range",
                    ),
                    models.Index(fields=["type"], name="idx_benefit_type"),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("active_to__gte", models.F("active_from"))),
                        name="ck_benefit_valid_date_range",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("type", "discount"),
                                ("value__gte", 0),
                                ("value__isnull", False),
                                ("value__lte", 100),
                            ),
                            ("type", "combo"),
                            _connector="OR",
                        ),
                        name="ck_benefit_discount_value_required",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(("combo_spec__isnull", False), ("type", "combo")),
                            ("type", "discount"),
                            _connector="OR",
                        ),
                        name="ck_benefit_combo_spec_required",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("code", models.CharField(db_index=True, max_length=32, unique=True)),
                ("name", models.CharField(db_index=True, max_length=160)),
                ("brand", models.CharField(blank=True, max_length=80)),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("unit", "Unidad"),
                            ("package", "Paquete"),
                            ("KG", "Kilogramo"),
                            ("LT", "Litro"),
                        ],
                        default="unit",
                        max_length=8,
                    ),
                ),
                ("category", models.CharField(blank=True, max_length=80)),
                ("price", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "tax_rate",
                    models.DecimalField(decimal_places=2, default=21, max_digits=5),
                ),
                (
                    "low_stock_threshold",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "pack_size",
                    models.IntegerField(
                        blank=True,
                        help_text="NÃºmero de unidades por paquete",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["is_active", "category"],
                        name="idx_product_active_category",
                    ),
                    models.Index(fields=["brand"], name="idx_product_brand"),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["name"],
                        name="gin_product_name_trgm",
                        opclasses=["gin_trgm_ops"],
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["code"],
                        name="gin_product_code_trgm",
                        opclasses=["gin_trgm_ops"],
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("price__gt", 0)),
                        name="ck_product_price_positive",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("tax_rate__gte", 0), ("tax_rate__lte", 100)
                        ),
                        name="ck_product_tax_rate_valid",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("pack_size__isnull", True),
                            ("pack_size__gt", 0),
                            _connector="OR",
                        ),
                        name="ck_product_pack_size_positive",
                    ),
                ],
            },
        ),
    ]
