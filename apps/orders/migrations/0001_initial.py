# Generated by Django 5.1.4 on 2025-09-23 08:31

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("catalog", "0001_initial"),
        ("customers", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("placed", "Placed")],
                        default="draft",
                        max_length=12,
                    ),
                ),
                ("currency", models.CharField(default="ARS", max_length=3)),
                (
                    "subtotal",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "discount_total",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "tax_total",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "total",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[("delivery", "Delivery"), ("pickup", "Pickup")],
                        max_length=8,
                    ),
                ),
                ("delivery_address_text", models.CharField(blank=True, max_length=255)),
                ("delivery_window_from", models.TimeField(blank=True, null=True)),
                ("delivery_window_to", models.TimeField(blank=True, null=True)),
                ("delivery_instructions", models.TextField(blank=True)),
                ("requested_delivery_date", models.DateField(blank=True, null=True)),
                (
                    "client_req_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=64, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="customers.customer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("qty", models.DecimalField(decimal_places=3, max_digits=12)),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("benefit_applied", models.JSONField(blank=True, null=True)),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="orders.order"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="catalog.product",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["customer", "status"], name="idx_order_customer_status"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["status", "created_at"], name="idx_order_status_date"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["requested_delivery_date"], name="idx_order_delivery_date"
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("subtotal__gte", 0)),
                name="ck_order_subtotal_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("discount_total__gte", 0)),
                name="ck_order_discount_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("tax_total__gte", 0)),
                name="ck_order_tax_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("total__gte", 0)),
                name="ck_order_total_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("delivery_window_to__gte", models.F("delivery_window_from")),
                    ("delivery_window_from__isnull", True),
                    ("delivery_window_to__isnull", True),
                    _connector="OR",
                ),
                name="ck_order_valid_delivery_window",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.UniqueConstraint(
                condition=models.Q(("client_req_id__isnull", False)),
                fields=("client_req_id",),
                name="uq_order_client_req_id",
            ),
        ),
        migrations.AddIndex(
            model_name="orderitem",
            index=models.Index(fields=["order"], name="idx_orderitem_order"),
        ),
        migrations.AddConstraint(
            model_name="orderitem",
            constraint=models.UniqueConstraint(
                fields=("order", "product"), name="uq_orderitem_per_product"
            ),
        ),
        migrations.AddConstraint(
            model_name="orderitem",
            constraint=models.CheckConstraint(
                condition=models.Q(("qty__gt", 0)), name="ck_orderitem_qty_positive"
            ),
        ),
        migrations.AddConstraint(
            model_name="orderitem",
            constraint=models.CheckConstraint(
                condition=models.Q(("unit_price__gte", 0)),
                name="ck_orderitem_price_non_negative",
            ),
        ),
    ]
